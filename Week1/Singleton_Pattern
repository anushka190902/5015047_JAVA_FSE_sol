Exercise 1: Implementing the Singleton Pattern

Scenario:

You need to ensure that a logging utility class in your application has only one instance throughout the application lifecycle to ensure consistent logging.

Step 1 :Create a class named Logger with a private static instance of itself, a private constructor, and a public static method to get the instance of the Logger class.

Step 2: Implement the Singleton Pattern
        The Logger class in the code above follows the Singleton design pattern:
        The constructor is private, so it cannot be instantiated from outside the class.
        A private static instance of the class is created.
        A public static method getInstance() is provided to return the single instance of the class.

Step 3: Test the Singleton Implementation
        Create a test class to verify that only one instance of Logger is created and used across the application.


By running the SingletonTest class, we will see that both logger1 and logger2 refer to the same instance, confirming the Singleton pattern is correctly implemented
